//  Bemit
//  ==========================================================================
//  require use brackets
//
// source: https://github.com/danielguillan/bem-constructor
// block mixin bug: https://github.com/stylus/stylus/issues/1703#issuecomment-74345755


//  Functions
//  --------------------------------------------------------------------------

join(delim, args)
  buf = ''
  for arg, index in args
    if index
      buf += delim + arg
    else
      buf += arg


//  Component
//  --------------------------------------------------------------------------

component($name, $block)
  {'.' + $bemit-component-prefix + '-' + $name}
    $block()


//  Object
//  --------------------------------------------------------------------------

object($name, $block)
  {'.' + $bemit-object-prefix + '-' + $name}
    $block()


//  Utility
//  --------------------------------------------------------------------------

_utility()
  $list = ''
  $reference = '.'
  for $name in arguments
    $list = ($list + $reference + $bemit-utility-prefix + '-' + $name + '\n')
  return $list

utility()
  $arguments = arguments
  $block = pop($arguments)
  {_utility($arguments)}
    $block()


//  Scope
//  --------------------------------------------------------------------------

scope($name, $block)
  {'.' + $bemit-scope-prefix + '-' + $name}
    $block()


//  Element
//  --------------------------------------------------------------------------

// @api private
// @param $elements - list of elements
_element($elements)
  $selectors = ()
  $reference = '&'
  $selector = '' // >

  // update $selector with '>'
  if typeof(last($elements)) == 'boolean' &&  last($elements) == true
    _void = pop($elements)
    $selector = '> '
    $reference = '& ' + $selector + '&'

  // update $reference with partial reference -1
  if match('.' + $bemit-state-prefix + '-', selector('&')) || match($bemit-modifier-separator, selector('&')) || match($bemit-suffix-prefix, selector('&'))
    $reference = '& ' + $selector + '^[-1]'

  for $name in $elements
    push($selectors, $reference + $bemit-element-separator + $name)

  return join(', ', $selectors)

// @api public
//
// usage:
//
// element('foo', 'bar', @(){
//   opacity: 0
// })
element()
  $arguments = arguments // names
  $block = pop($arguments) // anonymous function
  {_element($arguments)}
    $block()


//  Modifier
//  --------------------------------------------------------------------------

_modifier()
  $list = ''
  $reference = '&'
  if match('.' + $bemit-state-prefix + '-', selector('&')) || match($bemit-suffix-prefix, selector('&'))
    $reference = '& ' + '^[-1]'
  for $name in arguments
    $list = ($list + $reference + $bemit-modifier-separator + $name + '\n')
  return $list

modifier()
  $arguments = arguments
  $block = pop($arguments)
  {_modifier($arguments)}
    $block()


//  State
//  --------------------------------------------------------------------------

_state()
  $list = ''
  $reference = '&'
  if match($bemit-modifier-separator, selector('&')) || match($bemit-suffix-prefix, selector('&'))
    $reference = '& ' + '^[-1]'
  for $name in arguments
    $list = ($list + $reference + '.' + $bemit-state-prefix + '-' + $name + '\n')
  return $list

state()
  $arguments = arguments
  $block = pop($arguments)
  {_state($arguments)}
    $block()


//  Suffix
//  --------------------------------------------------------------------------

_suffix()
  $list = ''
  $reference = '&'
  // if match('.' + $bemit-state-prefix + '-', selector('&')) || match($bemit-modifier-separator, selector('&'))
  //   $reference = '& ' + '^[-1]'
  for $name in arguments
    $list = ($list + $reference + $bemit-suffix-prefix + $name + '\n')
  return $list

suffix()
  $arguments = arguments
  $block = pop($arguments)
  {_suffix($arguments)}
    $block()


//  Debug
//  --------------------------------------------------------------------------

bemit-debug()
  // elements
  [class*={'"' + $bemit-element-separator + '"'}]
    outline: $bemit-debug-styles['elements']

  // modifiers
  [class*={'"' + $bemit-modifier-separator + '"'}]
    outline: $bemit-debug-styles['modifiers']

  // objects
  [class^={'"' + $bemit-object-prefix + '-"'}]
  [class*={'" ' + $bemit-object-prefix + '"'}]
    outline: $bemit-debug-styles['objects']

  // components
  [class^={'"' + $bemit-component-prefix + '-"'}]
  [class*={'" ' + $bemit-component-prefix + '"'}]
    outline: $bemit-debug-styles['components']

  // utilities
  [class^={'"' + $bemit-utility-prefix + '-"'}]
  [class*={'" ' + $bemit-utility-prefix + '"'}]
    outline: $bemit-debug-styles['utilities']
